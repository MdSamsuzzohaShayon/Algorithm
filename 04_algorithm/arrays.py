# Time - 2:09:00

# THE VALUES OF LIST ARE STORED IN MEMORY 
# THE ARRAYS STORES REFERENCES TO EACH OF THOSE OBJECTS 
# TO ACCESS A VALUE NEED TO USE A SUBSCRIPT ALONG WITH AN INDEX VALUE 
new_list = [1, 2, 3]
result = new_list[0]
print(result)


# THE IN OPERATOR ACTUALLY CALLS A CONTAINS METHOD THAT IS DEFINED ON THE LIST TYPE WHICH RUNS A LINEAR SEARCH OPERATION
if 1 in new_list: print(True)

# LINEAR SEARCH 
for n in new_list:
    if n == 1:
        print(True)
        break

# IF ARRAY WERE SORTED WE COULD USE BINARY SEARCH 
# BECAUSE SORT OPERATIONS INCURE A COST OF THEIR OWN LANGUAGES USUALLY STAY AWAY FROM SORTING THE LIST


"""
MOST ARRAY SUPPORT THREE TYPES OF INSERT OPERATIONS 
1. TRUE INSERT - USING AN INDEX VALUE INSERT ANYWARE IN THE LIST (THIS OPERATION HAS A LINEAR RUNTIME)
WHEN WE INSERT AT THE START OF THE LIST THE ITEM IS CURRENTLY IN THAT SPOT MOVE TO THE NEXT SPOT, SECOND ITEM MOVE TO THE NEXT POSITION THIS KEEPS HAPPENING UNTIL ALL ELEMENT HAVE BEEN SHIFTED FORWARD ONE INDEX POSITION. SO IN THIS WORSE CASE SENARIO.
WE KNOW, ANY OPERATION THAT INVOLVES ITERATING THROUGH EVERY SINGLE VALUE MEANS A LINEAR RUNTIME. 
2. APPEND ITEM - APPENDING ALTHOUGH TECHNICALLY AN INSERT OPERATION IN THAT IS INSERTS AN ITEM INTO AN EXISTING ARRAY DOESN'T INCUR THE SAME RUNTIME COST BECAUSE APPENDS SIMPLLY ADD THE ITEM TO THE END OF THE LIST
"""


